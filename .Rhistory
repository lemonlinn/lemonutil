#  rownames(tabDF) <- c(y_names, "Column Totals")
#} else {
#  rownames(tabDF) <- c(oldrownames, "Column Totals")
#}
#if (!isFALSE(x_names)){
#  colnames(tabDF) <- c(y, x_names, "Row Totals")
#} else {
#  colnames(tabDF) <- c(y, oldcolnames, "Row Totals")
#}
chitest = summary(tab)
title = paste0("Cross Tabulation of ", x, " and ", y)
foot = paste0("(N=", toString(N), ")")
chi = paste0("Chi-Square=", round(chitest$statistic,2), " (p-val=", round(chitest$p.value,4), ")")
maxval = ncol(tabDF)
ft <- flextable::flextable(tabDF)
ft <- flextable::add_header_row(ft, top = TRUE, values = c(NA, x), colwidths = c(1, maxval-1))
ft <- flextable::add_header_row(ft, top = TRUE, values = title, colwidths = maxval)
ft <- flextable::align(ft, i = c(1:2), align = "center", part = "header")
if (col_t & row_t){
ft <- flextable::add_footer_row(ft, top = FALSE, values = c(chi, " "), colwidths = c(maxval-1, 1))
} else {
ft <- flextable::add_footer_row(ft, top = FALSE, values = c(chi, foot), colwidths = c(maxval-1, 1))
}
ft <- flextable::align(ft, i = 1, j = maxval, align = "right", part = "footer")
#ft <- border_remove(ft)
ft <- flextable::bold(ft, part = "header", i = 1)
#ft <- hline_bottom(ft, border = fp_border())
#ft <- hline(ft, i = 1, border = fp_border(), part = "header")
ft
data = df_n
x = "gender"
y = "sexorient"
x_names = c(unlist(as.character(gender_opts$txt)))
y_names = c(unlist(as.character(sex_opts$txt)))
percents = "T"
row_t = FALSE
col_t = FALSE
tab = xtabs(formula = ~unlist(data[y])+unlist(data[x]))
tabDF = as.data.frame.matrix(tab)
oldrownames = rownames(tabDF)
oldcolnames = colnames(tabDF)
N = nrow(na.omit(data[c(x,y)]))
C = colSums(tabDF, na.rm = T)
R = rowSums(tabDF, na.rm = T)
for (i in 1:ncol(tabDF)){
for (j in 1:nrow(tabDF)){
a = strtoi(tabDF[j,i])
if (percents == "TRC"){
tabDF[j,i] <- paste0(toString(round((a/N)*100, digits=2)), "%T", "\n",
toString(round((a/C[i])*100,digits=2)), "%C", "\n",
toString(round((a/R[j])*100,digits=2)), "%R", "\n",
"(n=", toString(a), ")")
} else if (percents == "RC"){
tabDF[j,i] <- paste0(toString(round((a/C[i])*100,digits=2)), "%C", "\n",
toString(round((a/R[j])*100,digits=2)), "%R", "\n",
"(n=", toString(a), ")")
} else if (percents == "TR"){
tabDF[j,i] <- paste0(toString(round((a/N)*100, digits=2)), "%T", "\n",
toString(round((a/R[j])*100,digits=2)), "%R", "\n",
"(n=", toString(a), ")")
} else if (percents == "TC"){
tabDF[j,i] <- paste0(toString(round((a/N)*100, digits=2)), "%T", "\n",
toString(round((a/C[i])*100,digits=2)), "%C", "\n",
"(n=", toString(a), ")")
} else if (percents == "T"){
tabDF[j,i] <- paste0(toString(round((a/N)*100, digits=2)), "%T", "\n",
"(n=", toString(a), ")")
} else if (percents == "R"){
tabDF[j,i] <- paste0(toString(round((a/R[j])*100,digits=2)), "%R", "\n",
"(n=", toString(a), ")")
} else if (percents == "C"){
tabDF[j,i] <- paste0(toString(round((a/C[i])*100,digits=2)), "%C", "\n",
"(n=", toString(a), ")")
}
}
}
if (row_t & col_t){
tabDF <- cbind(tabDF, data.frame("Row Totals" = R))
colDF <- data.frame(t(c(C, paste0("N=", toString(N)))))
colnames(colDF) <- colnames(tabDF)
tabDF <- rbind(tabDF, colDF)
if (!isFALSE(y_names)){
rownames(tabDF) <- c(y_names, "Column Totals")
} else {
rownames(tabDF) <- c(oldrownames, "Column Totals")
}
tabDF <- cbind(x = rownames(tabDF), tabDF)
if (!isFALSE(x_names)){
colnames(tabDF) <- c(y, x_names, "Row Totals")
} else {
colnames(tabDF) <- c(y, oldcolnames, "Row Totals")
}
}
if (row_t & !col_t){
tabDF <- cbind(tabDF, data.frame("Row Totals" = R))
if (!isFALSE(y_names)){
rownames(tabDF) <- c(y_names)
} else {
rownames(tabDF) <- c(oldrownames)
}
tabDF <- cbind(x = rownames(tabDF), tabDF)
if (!isFALSE(x_names)){
colnames(tabDF) <- c(y, x_names, "Row Totals")
} else {
colnames(tabDF) <- c(y, oldcolnames, "Row Totals")
}
}
if (!row_t & col_t){
colDF <- data.frame(t(C))
colnames(colDF) <- colnames(tabDF)
tabDF <- rbind(tabDF, colDF)
if (!isFALSE(y_names)){
rownames(tabDF) <- c(y_names, "Column Totals")
} else {
rownames(tabDF) <- c(oldrownames, "Column Totals")
}
tabDF <- cbind(x = rownames(tabDF), tabDF)
if (!isFALSE(x_names)){
colnames(tabDF) <- c(y, x_names)
} else {
colnames(tabDF) <- c(y, oldcolnames)
}
}
if (!row_t & !col_t){
if (!isFALSE(y_names)){
rownames(tabDF) <- c(y_names)
} else {
rownames(tabDF) <- c(oldrownames)
}
tabDF <- cbind(x = rownames(tabDF), tabDF)
if (!isFALSE(x_names)){
colnames(tabDF) <- c(y, x_names)
} else {
colnames(tabDF) <- c(y, oldcolnames)
}
}
#tabDF <- cbind(tabDF, data.frame("Row Totals" = R))
#colDF <- data.frame(t(c(C, paste0("N=", toString(N)))))
#colnames(colDF) <- colnames(tabDF)
#tabDF <- rbind(tabDF, colDF)
#if (!isFALSE(y_names)){
#  rownames(tabDF) <- c(y_names, "Column Totals")
#} else {
#  rownames(tabDF) <- c(oldrownames, "Column Totals")
#}
#if (!isFALSE(x_names)){
#  colnames(tabDF) <- c(y, x_names, "Row Totals")
#} else {
#  colnames(tabDF) <- c(y, oldcolnames, "Row Totals")
#}
chitest = summary(tab)
title = paste0("Cross Tabulation of ", x, " and ", y)
foot = paste0("(N=", toString(N), ")")
chi = paste0("Chi-Square=", round(chitest$statistic,2), " (p-val=", round(chitest$p.value,4), ")")
maxval = ncol(tabDF)
ft <- flextable::flextable(tabDF)
ft <- flextable::add_header_row(ft, top = TRUE, values = c(NA, x), colwidths = c(1, maxval-1))
ft <- flextable::add_header_row(ft, top = TRUE, values = title, colwidths = maxval)
ft <- flextable::align(ft, i = c(1:2), align = "center", part = "header")
if (col_t & row_t){
ft <- flextable::add_footer_row(ft, top = FALSE, values = c(chi, " "), colwidths = c(maxval-1, 1))
} else {
ft <- flextable::add_footer_row(ft, top = FALSE, values = c(chi, foot), colwidths = c(maxval-1, 1))
}
ft <- flextable::align(ft, i = 1, j = maxval, align = "right", part = "footer")
#ft <- border_remove(ft)
ft <- flextable::bold(ft, part = "header", i = 1)
#ft <- hline_bottom(ft, border = fp_border())
#ft <- hline(ft, i = 1, border = fp_border(), part = "header")
ft
data = df_n
x = "gender"
y = "sexorient"
x_names = c(unlist(as.character(gender_opts$txt)))
y_names = c(unlist(as.character(sex_opts$txt)))
percents = "N"
row_t = FALSE
col_t = FALSE
tab = xtabs(formula = ~unlist(data[y])+unlist(data[x]))
tabDF = as.data.frame.matrix(tab)
oldrownames = rownames(tabDF)
oldcolnames = colnames(tabDF)
N = nrow(na.omit(data[c(x,y)]))
C = colSums(tabDF, na.rm = T)
R = rowSums(tabDF, na.rm = T)
if (percents != "N"){
for (i in 1:ncol(tabDF)){
for (j in 1:nrow(tabDF)){
a = strtoi(tabDF[j,i])
if (percents == "TRC"){
tabDF[j,i] <- paste0(toString(round((a/N)*100, digits=2)), "%T", "\n",
toString(round((a/C[i])*100,digits=2)), "%C", "\n",
toString(round((a/R[j])*100,digits=2)), "%R", "\n",
"(n=", toString(a), ")")
} else if (percents == "RC"){
tabDF[j,i] <- paste0(toString(round((a/C[i])*100,digits=2)), "%C", "\n",
toString(round((a/R[j])*100,digits=2)), "%R", "\n",
"(n=", toString(a), ")")
} else if (percents == "TR"){
tabDF[j,i] <- paste0(toString(round((a/N)*100, digits=2)), "%T", "\n",
toString(round((a/R[j])*100,digits=2)), "%R", "\n",
"(n=", toString(a), ")")
} else if (percents == "TC"){
tabDF[j,i] <- paste0(toString(round((a/N)*100, digits=2)), "%T", "\n",
toString(round((a/C[i])*100,digits=2)), "%C", "\n",
"(n=", toString(a), ")")
} else if (percents == "T"){
tabDF[j,i] <- paste0(toString(round((a/N)*100, digits=2)), "%T", "\n",
"(n=", toString(a), ")")
} else if (percents == "R"){
tabDF[j,i] <- paste0(toString(round((a/R[j])*100,digits=2)), "%R", "\n",
"(n=", toString(a), ")")
} else if (percents == "C"){
tabDF[j,i] <- paste0(toString(round((a/C[i])*100,digits=2)), "%C", "\n",
"(n=", toString(a), ")")
}
}
}
}
if (row_t & col_t){
tabDF <- cbind(tabDF, data.frame("Row Totals" = R))
colDF <- data.frame(t(c(C, paste0("N=", toString(N)))))
colnames(colDF) <- colnames(tabDF)
tabDF <- rbind(tabDF, colDF)
if (!isFALSE(y_names)){
rownames(tabDF) <- c(y_names, "Column Totals")
} else {
rownames(tabDF) <- c(oldrownames, "Column Totals")
}
tabDF <- cbind(x = rownames(tabDF), tabDF)
if (!isFALSE(x_names)){
colnames(tabDF) <- c(y, x_names, "Row Totals")
} else {
colnames(tabDF) <- c(y, oldcolnames, "Row Totals")
}
}
if (row_t & !col_t){
tabDF <- cbind(tabDF, data.frame("Row Totals" = R))
if (!isFALSE(y_names)){
rownames(tabDF) <- c(y_names)
} else {
rownames(tabDF) <- c(oldrownames)
}
tabDF <- cbind(x = rownames(tabDF), tabDF)
if (!isFALSE(x_names)){
colnames(tabDF) <- c(y, x_names, "Row Totals")
} else {
colnames(tabDF) <- c(y, oldcolnames, "Row Totals")
}
}
if (!row_t & col_t){
colDF <- data.frame(t(C))
colnames(colDF) <- colnames(tabDF)
tabDF <- rbind(tabDF, colDF)
if (!isFALSE(y_names)){
rownames(tabDF) <- c(y_names, "Column Totals")
} else {
rownames(tabDF) <- c(oldrownames, "Column Totals")
}
tabDF <- cbind(x = rownames(tabDF), tabDF)
if (!isFALSE(x_names)){
colnames(tabDF) <- c(y, x_names)
} else {
colnames(tabDF) <- c(y, oldcolnames)
}
}
if (!row_t & !col_t){
if (!isFALSE(y_names)){
rownames(tabDF) <- c(y_names)
} else {
rownames(tabDF) <- c(oldrownames)
}
tabDF <- cbind(x = rownames(tabDF), tabDF)
if (!isFALSE(x_names)){
colnames(tabDF) <- c(y, x_names)
} else {
colnames(tabDF) <- c(y, oldcolnames)
}
}
chitest = summary(tab)
title = paste0("Cross Tabulation of ", x, " and ", y)
foot = paste0("(N=", toString(N), ")")
chi = paste0("Chi-Square=", round(chitest$statistic,2), " (p-val=", round(chitest$p.value,4), ")")
maxval = ncol(tabDF)
ft <- flextable::flextable(tabDF)
ft <- flextable::add_header_row(ft, top = TRUE, values = c(NA, x), colwidths = c(1, maxval-1))
ft <- flextable::add_header_row(ft, top = TRUE, values = title, colwidths = maxval)
ft <- flextable::align(ft, i = c(1:2), align = "center", part = "header")
if (col_t & row_t){
ft <- flextable::add_footer_row(ft, top = FALSE, values = c(chi, " "), colwidths = c(maxval-1, 1))
} else {
ft <- flextable::add_footer_row(ft, top = FALSE, values = c(chi, foot), colwidths = c(maxval-1, 1))
}
ft <- flextable::align(ft, i = 1, j = maxval, align = "right", part = "footer")
ft <- flextable::bold(ft, part = "header", i = 1)
ft
data = df_n
x = "gender"
y = "sexorient"
x_names = c(unlist(as.character(gender_opts$txt)))
y_names = c(unlist(as.character(sex_opts$txt)))
percents = "N"
row_t = TRUE
col_t = TRUE
tab = xtabs(formula = ~unlist(data[y])+unlist(data[x]))
tabDF = as.data.frame.matrix(tab)
oldrownames = rownames(tabDF)
oldcolnames = colnames(tabDF)
N = nrow(na.omit(data[c(x,y)]))
C = colSums(tabDF, na.rm = T)
R = rowSums(tabDF, na.rm = T)
if (percents != "N"){
for (i in 1:ncol(tabDF)){
for (j in 1:nrow(tabDF)){
a = strtoi(tabDF[j,i])
if (percents == "TRC"){
tabDF[j,i] <- paste0(toString(round((a/N)*100, digits=2)), "%T", "\n",
toString(round((a/C[i])*100,digits=2)), "%C", "\n",
toString(round((a/R[j])*100,digits=2)), "%R", "\n",
"(n=", toString(a), ")")
} else if (percents == "RC"){
tabDF[j,i] <- paste0(toString(round((a/C[i])*100,digits=2)), "%C", "\n",
toString(round((a/R[j])*100,digits=2)), "%R", "\n",
"(n=", toString(a), ")")
} else if (percents == "TR"){
tabDF[j,i] <- paste0(toString(round((a/N)*100, digits=2)), "%T", "\n",
toString(round((a/R[j])*100,digits=2)), "%R", "\n",
"(n=", toString(a), ")")
} else if (percents == "TC"){
tabDF[j,i] <- paste0(toString(round((a/N)*100, digits=2)), "%T", "\n",
toString(round((a/C[i])*100,digits=2)), "%C", "\n",
"(n=", toString(a), ")")
} else if (percents == "T"){
tabDF[j,i] <- paste0(toString(round((a/N)*100, digits=2)), "%T", "\n",
"(n=", toString(a), ")")
} else if (percents == "R"){
tabDF[j,i] <- paste0(toString(round((a/R[j])*100,digits=2)), "%R", "\n",
"(n=", toString(a), ")")
} else if (percents == "C"){
tabDF[j,i] <- paste0(toString(round((a/C[i])*100,digits=2)), "%C", "\n",
"(n=", toString(a), ")")
}
}
}
}
if (row_t & col_t){
tabDF <- cbind(tabDF, data.frame("Row Totals" = R))
colDF <- data.frame(t(c(C, paste0("N=", toString(N)))))
colnames(colDF) <- colnames(tabDF)
tabDF <- rbind(tabDF, colDF)
if (!isFALSE(y_names)){
rownames(tabDF) <- c(y_names, "Column Totals")
} else {
rownames(tabDF) <- c(oldrownames, "Column Totals")
}
tabDF <- cbind(x = rownames(tabDF), tabDF)
if (!isFALSE(x_names)){
colnames(tabDF) <- c(y, x_names, "Row Totals")
} else {
colnames(tabDF) <- c(y, oldcolnames, "Row Totals")
}
}
if (row_t & !col_t){
tabDF <- cbind(tabDF, data.frame("Row Totals" = R))
if (!isFALSE(y_names)){
rownames(tabDF) <- c(y_names)
} else {
rownames(tabDF) <- c(oldrownames)
}
tabDF <- cbind(x = rownames(tabDF), tabDF)
if (!isFALSE(x_names)){
colnames(tabDF) <- c(y, x_names, "Row Totals")
} else {
colnames(tabDF) <- c(y, oldcolnames, "Row Totals")
}
}
if (!row_t & col_t){
colDF <- data.frame(t(C))
colnames(colDF) <- colnames(tabDF)
tabDF <- rbind(tabDF, colDF)
if (!isFALSE(y_names)){
rownames(tabDF) <- c(y_names, "Column Totals")
} else {
rownames(tabDF) <- c(oldrownames, "Column Totals")
}
tabDF <- cbind(x = rownames(tabDF), tabDF)
if (!isFALSE(x_names)){
colnames(tabDF) <- c(y, x_names)
} else {
colnames(tabDF) <- c(y, oldcolnames)
}
}
if (!row_t & !col_t){
if (!isFALSE(y_names)){
rownames(tabDF) <- c(y_names)
} else {
rownames(tabDF) <- c(oldrownames)
}
tabDF <- cbind(x = rownames(tabDF), tabDF)
if (!isFALSE(x_names)){
colnames(tabDF) <- c(y, x_names)
} else {
colnames(tabDF) <- c(y, oldcolnames)
}
}
chitest = summary(tab)
title = paste0("Cross Tabulation of ", x, " and ", y)
foot = paste0("(N=", toString(N), ")")
chi = paste0("Chi-Square=", round(chitest$statistic,2), " (p-val=", round(chitest$p.value,4), ")")
maxval = ncol(tabDF)
ft <- flextable::flextable(tabDF)
ft <- flextable::add_header_row(ft, top = TRUE, values = c(NA, x), colwidths = c(1, maxval-1))
ft <- flextable::add_header_row(ft, top = TRUE, values = title, colwidths = maxval)
ft <- flextable::align(ft, i = c(1:2), align = "center", part = "header")
if (col_t & row_t){
ft <- flextable::add_footer_row(ft, top = FALSE, values = c(chi, " "), colwidths = c(maxval-1, 1))
} else {
ft <- flextable::add_footer_row(ft, top = FALSE, values = c(chi, foot), colwidths = c(maxval-1, 1))
}
ft <- flextable::align(ft, i = 1, j = maxval, align = "right", part = "footer")
ft <- flextable::bold(ft, part = "header", i = 1)
ft
devtools::document()
devtools::install_github("lemonlinn/lemonutil")
devtools::install_github("lemonlinn/lemonutil")
devtools::install_github("lemonlinn/lemonutil")
devtools::document()
devtools::install_github("lemonlinn/lemonutil", upgrade = "never")
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(suppressMessages(library(lemonutil)))
suppressWarnings(suppressMessages(library(readr)))
suppressWarnings(suppressMessages(library(knitr)))
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(officer)))
suppressWarnings(suppressMessages(library(ggplot2)))
suppressWarnings(suppressMessages(library(plyr)))
suppressWarnings(suppressMessages(library(reshape2)))
suppressWarnings(suppressMessages(library(psych)))
col_n <- c("startdate", "enddate", "status", "progress", "duration", "finished", "recorddate", "uuid", "distributionchannel", "lang", "reztype", "reztime", "org_neighbor", "org_prof", "org_relig", "org_ed", "org_theater", "org_pol", "org_lgbt", "birthyr", "relig", "relig_txt", "educ", "educ_txt", "wrkstatus", "wrkstatus_txt", "union", "polview", "polparty", "regvote", "statecut", "citycut", "job_prez", "job_governor", "job_mayor", "job_ppl", "job_news", "sexorient", "gender", "gender_txt", "uscitizen", "income", "origin", "origin_txt", "race", "race_txt", "vote_bprez", "vote_comp", "vote_pubad", "vote_councilmbr", "vote_mayor", "vote_governor", "vote_congress", "vote_senate", "vote_prez", "civeng_pac", "civeng_adorg", "civeng_wear", "civeng_talk", "civeng_contactoff", "civeng_online", "civeng_rally", "civeng_polmeet", "civeng_boardmeet", "civeng_cngmbr", "effect_petition", "effect_contact", "effect_rally", "effect_boycott", "effect_donate", "effect_volunteer", "effect_other", "effect_txt", "done_petition", "done_contact", "done_rally", "done_boycott", "done_donate", "done_volunteer", "done_other", "nation_terror", "nation_econ", "nation_pubhealth", "nation_pubed", "nation_environ", "nation_ss", "nation_poverty", "nation_elect", "nation_abort", "nation_immig", "nation_fisc", "nation_drug", "nation_infrastruc", "nation_job", "nation_incomeineq", "nation_sba", "nation_military", "nation_gun", "nation_race", "nation_trade", "nation_lgbt", "nation_other", "nation_txt", "city_hcode", "city_affordh", "city_pubtrans", "city_pubed", "city_job", "city_ss", "city_homeless", "city_tax", "city_deficit", "city_pubhealth", "city_sanit", "city_crime", "city_police", "city_road", "city_park", "city_hate", "city_sba", "city_other", "city_txt", "lgbt_house", "lgbt_employ", "lgbt_hctrans", "lgbt_hcsex", "lgbt_hcmental", "lgbt_hc", "lgbt_food", "lgbt_hate", "lgbt_homeless", "lgbt_sensitiv", "lgbt_abuse", "lgbt_bully", "knowissue", "nocare", "govtattention", "trust_prez", "trust_congress", "trust_stateleg", "trust_governor", "trust_citycouncil", "trust_mayor", "govtcorrupt", "knowgovt", "newstime", "site_agree", "site_neutl", "site_dsagr", "web_petition", "web_contact", "web_meet", "zipcode", "intersect", "blasio", "stringer", "nyccouncil", "aoc", "nycspend_police", "nycspend_pubed", "nycspend_pubhealth", "nycspend_park", "nycspend_ss")
tbl_n <- c("reztype", "reztime", "org_neighbor", "org_prof", "org_relig", "org_ed", "org_theater", "org_pol", "org_lgbt", "relig", "educ", "wrkstatus", "union", "polview", "polparty", "regvote", "statecut", "citycut", "job_prez", "job_governor", "job_mayor", "job_ppl", "job_news", "sexorient", "gender", "uscitizen", "income", "origin", "race", "vote_bprez", "vote_comp", "vote_pubad", "vote_councilmbr", "vote_mayor", "vote_governor", "vote_congress", "vote_senate", "vote_prez", "civeng_pac", "civeng_adorg", "civeng_wear", "civeng_talk", "civeng_contactoff", "civeng_online", "civeng_rally", "civeng_polmeet", "civeng_boardmeet", "civeng_cngmbr", "effect_petition", "effect_contact", "effect_rally", "effect_boycott", "effect_donate", "effect_volunteer", "effect_other", "done_petition", "done_contact", "done_rally", "done_boycott", "done_donate", "done_volunteer", "done_other", "nation_terror", "nation_econ", "nation_pubhealth", "nation_pubed", "nation_environ", "nation_ss", "nation_poverty", "nation_elect", "nation_abort", "nation_immig", "nation_fisc", "nation_drug", "nation_infrastruc", "nation_job", "nation_incomeineq", "nation_sba", "nation_military", "nation_gun", "nation_race", "nation_trade", "nation_lgbt", "nation_other", "city_hcode", "city_affordh", "city_pubtrans", "city_pubed", "city_job", "city_ss", "city_homeless", "city_tax", "city_deficit", "city_pubhealth", "city_sanit", "city_crime", "city_police", "city_road", "city_park", "city_hate", "city_sba", "city_other", "lgbt_house", "lgbt_employ", "lgbt_hctrans", "lgbt_hcsex", "lgbt_hcmental", "lgbt_hc", "lgbt_food", "lgbt_hate", "lgbt_homeless", "lgbt_sensitiv", "lgbt_abuse", "lgbt_bully", "knowissue", "nocare", "govtattention", "trust_prez", "trust_congress", "trust_stateleg", "trust_governor", "trust_citycouncil", "trust_mayor", "govtcorrupt", "knowgovt", "newstime", "site_agree", "site_neutl", "site_dsagr", "web_petition", "web_contact", "web_meet")
df_n <- readr::read_csv("C:/Users/swagj/Dropbox/NEW Pride Agenda Project/dataset/NPA_num_2020-15-08.csv", col_names = col_n, skip = 3)
df_t <- readr::read_csv("C:/Users/swagj/Dropbox/NEW Pride Agenda Project/dataset/NPA_text_2020-15-06.csv", col_names = col_n, skip = 3)
df_h <- readr::read_csv("C:/Users/swagj/Dropbox/NEW Pride Agenda Project/dataset/NPA_text_2020-15-06.csv", col_names = col_n, n_max = 3)
gender_opts = data.frame(num = unlist(df_n["gender"]), txt = unlist(df_t["gender"]), row.names = NULL)
gender_opts = na.omit(gender_opts)
gender_opts = gender_opts %>% dplyr::group_by(txt) %>% dplyr::summarise(num = mean(num), .groups = "drop")
gender_opts = gender_opts[order(gender_opts$num),]
sex_opts = data.frame(num = unlist(df_n["sexorient"]), txt = unlist(df_t["sexorient"]), row.names = NULL)
sex_opts = na.omit(sex_opts)
sex_opts = sex_opts %>% dplyr::group_by(txt) %>% dplyr::summarise(num = mean(num), .groups = "drop")
sex_opts = sex_opts[order(sex_opts$num),]
crosstable_ext(df_n, "gender", "sexorient", x_names = c(unlist(as.character(gender_opts$txt))), y_names =c(unlist(as.character(sex_opts$txt))))
df_n$lgbtstat = ifelse(((df_n$gender != 1 | df_n$gender != 2) & (df_n$sexorient != 1)), 1, 0)
df_t$lgbtstat = ifelse(((df_n$gender != 1 | df_n$gender != 2) & (df_n$sexorient != 1)), "Yes", "No")
df_h$lgbtstat = c("Q45", "Do you qualify as LGBTQ+? (Researcher Generated)", "{}")
df_ng <- subset(df_n, lgbtstat == 1)
df_tg <- subset(df_t, lgbtstat == "Yes")
gender_opts = data.frame(num = unlist(df_ng["gender"]), txt = unlist(df_tg["gender"]), row.names = NULL)
gender_opts = na.omit(gender_opts)
gender_opts = gender_opts %>% dplyr::group_by(txt) %>% dplyr::summarise(num = mean(num), .groups = "drop")
gender_opts = gender_opts[order(gender_opts$num),]
sex_opts = data.frame(num = unlist(df_ng["sexorient"]), txt = unlist(df_tg["sexorient"]), row.names = NULL)
sex_opts = na.omit(sex_opts)
sex_opts = sex_opts %>% dplyr::group_by(txt) %>% dplyr::summarise(num = mean(num), .groups = "drop")
sex_opts = sex_opts[order(sex_opts$num),]
crosstable_ext(df_ng, "gender", "sexorient", x_names = c(unlist(as.character(gender_opts$txt))), y_names =c(unlist(as.character(sex_opts$txt))))
knitr::opts_chunk$set(echo = F)
knitr::opts_knit$set(root.dir = "C:/Users/swagj/Dropbox/NEW Pride Agenda Project/")
df_ng %>%
select(lgbt_house:lgbt_bully) %>%
summarize_at(vars(lgbt_house:lgbt_bully), list(~mean(., na.rm = T))) %>%
reshape2::melt(.) %>%
ggplot(., aes(x = variable, y = value)) +
geom_col() +
coord_flip()
df_ng %>%
summarize_at(vars(nation_terror:nation_other), list(~mean(., na.rm = T))) %>%
reshape2::melt(.) %>%
ggplot(., aes(x = variable, y = value)) +
geom_col() +
coord_flip()
df_ng %>%
summarize_at(vars(city_hcode:city_other), list(~mean(., na.rm = T))) %>%
reshape2::melt(.) %>%
ggplot(., aes(x = variable, y = value)) +
geom_col() +
coord_flip()
df_n %>%
summarize_at(vars(effect_petition:effect_other), list(~mean(., na.rm = T))) %>%
reshape2::melt(.) %>%
ggplot(., aes(x = variable, y = value)) +
geom_col() +
coord_flip()
df_ng %>%
summarize_at(vars(done_petition:done_other), list(~mean(., na.rm = T))) %>%
reshape2::melt(.) %>%
ggplot(., aes(x = variable, y = value)) +
geom_col() +
coord_flip()
library(gridExtra)
p1 = ggplot(df_t, aes(x=sexorient)) + geom_bar() + coord_flip()
p2 = ggplot(df_t, aes(x=gender)) + geom_bar() + coord_flip()
grid.arrange(p1,p2,ncol=1)
gender_opts = data.frame(num = unlist(df_n["gender"]), txt = unlist(df_t["gender"]), row.names = NULL)
gender_opts = na.omit(gender_opts)
gender_opts = gender_opts %>% dplyr::group_by(txt) %>% dplyr::summarise(num = mean(num), .groups = "drop")
gender_opts = gender_opts[order(gender_opts$num),]
sex_opts = data.frame(num = unlist(df_n["sexorient"]), txt = unlist(df_t["sexorient"]), row.names = NULL)
sex_opts = na.omit(sex_opts)
sex_opts = sex_opts %>% dplyr::group_by(txt) %>% dplyr::summarise(num = mean(num), .groups = "drop")
sex_opts = sex_opts[order(sex_opts$num),]
crosstable_ext(df_n, "gender", "sexorient", x_names = c(unlist(as.character(gender_opts$txt))), y_names = c(unlist(as.character(sex_opts$txt))))
